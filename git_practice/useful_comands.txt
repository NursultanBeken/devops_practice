show graph
> git log --oneline --all --graph

show diff between commits
> git diff

show a single commit
> git show 
create and switch to branch
> git checkout -b new-branch

save changes from your local folder before checkout
> git stash

List stash changes
> git stash list
apply stash changes
> git stash pop


cansel merge
> git merge --abort
> git merge --no-commit --no-ff <branch name>

show branched which not merged into master
> git branch --no-merged master

create branch
> git branch -c first-branch
> git checkout first-branch


Temporarily switch to a different commit
# This will detach your HEAD, that is, leave you with no branch checked out:
git checkout 0d1d7fc32

Or if you want to make commits while you're there, go ahead and make a new branch while you're at it:

git checkout -b old-state 0d1d7fc32
To go back to where you were, just check out the branch you were on again. (If you've made changes, as always when switching branches, you'll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)

Hard delete unpublished commits
# This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 0d1d7fc32

# Alternatively, if there's work to keep:
git stash
git reset --hard 0d1d7fc32
git stash pop
# This saves the modifications, then reapplies that patch after resetting.
# You could get merge conflicts, if you've modified things which were
# changed since the commit you reset to.