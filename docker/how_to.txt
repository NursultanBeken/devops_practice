# run alpine container
> docker run -it alpine sh

# build image from current folder
> docker image build -t test1 .

# list images
> docker image ls
> docker image inspect test1

# remove image
> docker image rm test1:1.0

# tag image
> image tag test1 nbekenov/test1:latest

# push image into dockerHub
> docker image tag test1 nbekenov/test1:latest

# list containers
> docker container ls
> docker ps

# run container 
# -it run in interactive mode
# (--rm to remove container after stop)
# -d to run in the background
# --restart on-failure
# --net <networkname>
> docker container run -it --rm --name my_python3 -p 5000:5000  -e ENV_VAR=name test1

# connect into container
> container exec -it my_python3 bash

# check logs
> docker container logs my_python3

# check resource stats
> docker container stats

# remove container
> docker container rm <container name>

# remove all stopped containers
> docker container prune

# moint source code folder to a runing container
> docker container run   -it --rm  \
    --name web \
    -p 5000:5000 \
    -e FLASK_APP=app.py -e FLASK_DEBUG=1 \
    -v $PWD:/app \
    web:1.0

# connect to a runing container    
> docker container exec -it web1 /bin/sh


# link containers with docker networks
LAN - local area network
WAN - wide area network

> docker network ls
> docker network inspect <network name>

# check the  ip adress of the container and ping another ip
> docker exec redis ifconfig
> docker exec redis ping 172.17.0.2

# create network
> docker network create --driver bridge mynetwork
> docker container run   -it --rm  \
    --name web \
    -p 5000:5000 \
    --net mynetwork
    -e FLASK_APP=app.py -e FLASK_DEBUG=1 \
    -v $PWD:/app \
    web:1.0